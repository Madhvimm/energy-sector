#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Plotting with ggplot2
p_gdp <- ggplot(gdp_data, aes(x = DATE, y = GDP)) +
geom_line() +
theme_minimal() +
labs(title = "Gross Domestic Product Over Time",
x = "Date",
y = "GDP (Billion USD)")
# Convert ggplot object to plotly for interactivity
ggplotly(p_gdp)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false
# Load the CPI dataset
cpi_data <- read.csv("CPIAUCSL.csv")
colnames(cpi_data)
# Convert DATE column to Date format if necessary
cpi_data$DATE <- as.Date(cpi_data$DATE)
# Handle NA values by removing rows with NA if you haven't done it already
cpi_data <- na.omit(cpi_data)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Plotting with ggplot2
p_cpi <- ggplot(cpi_data, aes(x = DATE, y = CPIAUCSL)) +
geom_line() +
theme_minimal() +
labs(title = "Consumer Price Index Over Time",
x = "Date",
y = "CPI")
# Convert ggplot object to plotly for interactivity
ggplotly(p_cpi)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false
# For Crude Oil
start_year <- as.numeric(format(min(composite_crude_oil_prices$Date), "%Y"))
start_month <- as.numeric(format(min(composite_crude_oil_prices$Date), "%m"))
composite_crude_oil_ts <- ts(composite_crude_oil_prices$Value, start=c(start_year, start_month), frequency=12)
# For Natural Gas
start_year_gas <- as.numeric(format(min(citygate_gas_prices$Date), "%Y"))
start_month_gas <- as.numeric(format(min(citygate_gas_prices$Date), "%m"))
citygate_gas_ts <- ts(citygate_gas_prices$Value, start=c(start_year_gas, start_month_gas), frequency=12)
# For Electricity
start_year_elec <- as.numeric(format(min(total_electricity_prices$Date), "%Y"))
start_month_elec <- as.numeric(format(min(total_electricity_prices$Date), "%m"))
total_electricity_ts <- ts(total_electricity_prices$Value, start=c(start_year_elec, start_month_elec), frequency=12)
# For GDP (it's quarterly)
start_year_gdp <- as.numeric(format(min(gdp_data$DATE), "%Y"))
start_quarter_gdp <- quarter(min(gdp_data$DATE))
gdp_ts <- ts(gdp_data$GDP, start=c(start_year_gdp, start_quarter_gdp), frequency=4)
# For CPI (it's quarterly)
start_year_cpi <- as.numeric(format(min(cpi_data$DATE), "%Y"))
start_quarter_cpi <- quarter(min(cpi_data$DATE))
cpi_ts <- ts(cpi_data$CPIAUCSL, start=c(start_year_cpi, start_quarter_cpi), frequency=4)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Create lag plot
library(forecast)
gglagplot(composite_crude_oil_ts, do.lines=FALSE) +
xlab("Lags") +
ylab("Value (USD)") +
ggtitle("Lag Plot for Refiner Acquisition Cost of Crude Oil") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_bw()
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Create lag plot
gglagplot(citygate_gas_ts, do.lines=FALSE) +
xlab("Lags") +
ylab("Price (USD)") +
ggtitle("Lag Plot for Natural Gas Price") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_bw()
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Create lag plot
gglagplot(total_electricity_ts, do.lines=FALSE) +
xlab("Lags") +
ylab("Price (Cents per Kilowatthour)") +
ggtitle("Lag Plot for Average Price of Electricity to Ultimate Customers") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_bw()
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Create lag plot
gglagplot(gdp_ts, do.lines=FALSE) +
xlab("Lags") +
ylab("GDP (Billion USD)") +
ggtitle("Lag Plot for GDP") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_bw()
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Create lag plot
gglagplot(cpi_ts, do.lines=FALSE) +
xlab("Lags") +
ylab("CPI") +
ggtitle("Lag Plot for CPI") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_bw()
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Decompose the time series
decomposed_crude_oil <- decompose(composite_crude_oil_ts, "multiplicative")
# Plot the decomposed components
autoplot(decomposed_crude_oil) +
ggtitle("Decomposition Plot for Refiner Acquisition Cost of Crude Oil") +
theme_bw()
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Decompose the time series
decomposed_natural_gas <- decompose(citygate_gas_ts, "multiplicative")
# Plot the decomposed components
autoplot(decomposed_natural_gas) +
ggtitle("Decomposition Plot for Natural Gas Price") +
theme_bw()
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Decompose the time series
decomposed_electricity <- decompose(total_electricity_ts, "multiplicative")
# Plot the decomposed components
autoplot(decomposed_electricity) +
ggtitle("Decomposition Plot for Average Price of Electricity to Ultimate Customers") +
theme_bw()
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Decompose the time series
decomposed_gdp <- decompose(gdp_ts, "multiplicative")
# Plot the decomposed components
autoplot(decomposed_gdp) +
ggtitle("Decomposition Plot for GDP") +
theme_bw()
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Decompose the time series
decomposed_cpi <- decompose(cpi_ts, "multiplicative")
# Plot the decomposed components
autoplot(decomposed_cpi) +
ggtitle("Decomposition Plot for CPI") +
theme_bw()
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# ACF and PACF for Crude Oil
crude_oil_acf <- ggAcf(composite_crude_oil_ts) +
ggtitle("ACF Plot for Refiner Acquisition Cost of Crude Oil") +
theme_bw() +
geom_segment(lineend = "butt", color = "turquoise4") +
geom_hline(yintercept = 0, color = "turquoise4")
crude_oil_pacf <- ggPacf(composite_crude_oil_ts) +
ggtitle("PACF Plot for Refiner Acquisition Cost of Crude Oil") +
theme_bw() +
geom_segment(lineend = "butt", color = "turquoise4") +
geom_hline(yintercept = 0, color = "turquoise4")
grid.arrange(crude_oil_acf, crude_oil_pacf, nrow = 2)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# ACF and PACF for Natural Gas
natural_gas_acf <- ggAcf(citygate_gas_ts) +
ggtitle("ACF Plot for Natural Gas Price") +
theme_bw() +
geom_segment(lineend = "butt", color = "turquoise4") +
geom_hline(yintercept = 0, color = "turquoise4")
natural_gas_pacf <- ggPacf(citygate_gas_ts) +
ggtitle("PACF Plot for Natural Gas Price") +
theme_bw() +
geom_segment(lineend = "butt", color = "turquoise4") +
geom_hline(yintercept = 0, color = "turquoise4")
grid.arrange(natural_gas_acf, natural_gas_pacf, nrow = 2)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# ACF and PACF for Electricity
electricity_acf <- ggAcf(total_electricity_ts) +
ggtitle("ACF Plot for Average Price of Electricity to Ultimate Customers") +
theme_bw() +
geom_segment(lineend = "butt", color = "turquoise4") +
geom_hline(yintercept = 0, color = "turquoise4")
electricity_pacf <- ggPacf(total_electricity_ts) +
ggtitle("PACF Plot for Average Price of Electricity to Ultimate Customers") +
theme_bw() +
geom_segment(lineend = "butt", color = "turquoise4") +
geom_hline(yintercept = 0, color = "turquoise4")
grid.arrange(electricity_acf, electricity_pacf, nrow = 2)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# ACF and PACF for GDP
gdp_acf <- ggAcf(gdp_ts) +
ggtitle("ACF Plot for GDP") +
theme_bw() +
geom_segment(lineend = "butt", color = "turquoise4") +
geom_hline(yintercept = 0, color = "turquoise4")
gdp_pacf <- ggPacf(gdp_ts) +
ggtitle("PACF Plot for GDP") +
theme_bw() +
geom_segment(lineend = "butt", color = "turquoise4") +
geom_hline(yintercept = 0, color = "turquoise4")
grid.arrange(gdp_acf, gdp_pacf, nrow = 2)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# ACF and PACF for CPI
cpi_acf <- ggAcf(cpi_ts) +
ggtitle("ACF Plot for CPI") +
theme_bw() +
geom_segment(lineend = "butt", color = "turquoise4") +
geom_hline(yintercept = 0, color = "turquoise4")
cpi_pacf <- ggPacf(cpi_ts) +
ggtitle("PACF Plot for CPI") +
theme_bw() +
geom_segment(lineend = "butt", color = "turquoise4") +
geom_hline(yintercept = 0, color = "turquoise4")
grid.arrange(cpi_acf, cpi_pacf, nrow = 2)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Dickey-Fuller Test for Crude Oil
adf_test_crude_oil <- tseries::adf.test(composite_crude_oil_ts)
# Display the test results
adf_test_crude_oil
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Dickey-Fuller Test for Natural Gas
adf_test_natural_gas <- tseries::adf.test(citygate_gas_ts)
# Display the test results
adf_test_natural_gas
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Dickey-Fuller Test for Electricity
adf_test_electricity <- tseries::adf.test(total_electricity_ts)
# Display the test results
adf_test_electricity
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Dickey-Fuller Test for GDP
adf_test_gdp <- tseries::adf.test(gdp_ts)
# Display the test results
adf_test_gdp
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Dickey-Fuller Test for CPI
adf_test_cpi <- tseries::adf.test(cpi_ts)
# Display the test results
adf_test_cpi
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Convert residuals to a ts object
fit_crude_oil <- lm(Value ~ Date, data = composite_crude_oil_prices, na.action = NULL)
resid_crude_oil_ts <- ts(resid(fit_crude_oil), start=c(start_year, start_month), frequency=12)
# Now plot the residuals
plot1_crude_oil <- autoplot(resid_crude_oil_ts, series="Detrended Crude Oil", colour = "#00BFC4") +
theme_bw() +
xlab("Time") +
ylab("Residuals") +
ggtitle("Detrended Crude Oil")
# Differencing plot remains the same
plot2_crude_oil <- autoplot(diff(composite_crude_oil_ts), series = "First Difference Crude Oil", colour = "#F8766D") +
theme_bw() +
xlab("Time") +
ylab("Differences") +
ggtitle("First Difference Crude Oil")
# Arrange plots
grid.arrange(plot1_crude_oil, plot2_crude_oil, nrow = 2)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Detrending using the original data frame
fit_natural_gas <- lm(Value ~ Date, data = citygate_gas_prices, na.action = NULL)
# Convert residuals to a ts object for plotting
resid_natural_gas_ts <- ts(resid(fit_natural_gas), start=c(start_year_gas, start_month_gas), frequency=12)
# Now plot the residuals
plot1_natural_gas <- autoplot(resid_natural_gas_ts, series="Detrended Natural Gas", colour = "#00BFC4") +
theme_bw() +
xlab("Time") +
ylab("Residuals") +
ggtitle("Detrended Natural Gas")
# Differencing plot remains the same
plot2_natural_gas <- autoplot(diff(citygate_gas_ts), series = "First Difference Natural Gas", colour = "#F8766D") +
theme_bw() +
xlab("Time") +
ylab("Differences") +
ggtitle("First Difference Natural Gas")
# Arrange plots
grid.arrange(plot1_natural_gas, plot2_natural_gas, nrow = 2)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Detrending using the original data frame
fit_electricity <- lm(Value ~ Date, data = total_electricity_prices, na.action = NULL)
# Convert residuals to a ts object for plotting
resid_electricity_ts <- ts(resid(fit_electricity), start=c(start_year_elec, start_month_elec), frequency=12)
# Plot the residuals
plot1_electricity <- autoplot(resid_electricity_ts, series="Detrended Electricity", colour = "#00BFC4") +
theme_bw() +
xlab("Time") +
ylab("Residuals") +
ggtitle("Detrended Electricity")
# Differencing plot
plot2_electricity <- autoplot(diff(total_electricity_ts), series = "First Difference Electricity", colour = "#F8766D") +
theme_bw() +
xlab("Time") +
ylab("Differences") +
ggtitle("First Difference Electricity")
# Arrange plots
grid.arrange(plot1_electricity, plot2_electricity, nrow = 2)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Detrending using the original data frame
fit_gdp <- lm(GDP ~ DATE, data = gdp_data, na.action = NULL)
# Convert residuals to a ts object for plotting
resid_gdp_ts <- ts(resid(fit_gdp), start=c(start_year_gdp, start_quarter_gdp), frequency=4)
# Plot the residuals
plot1_gdp <- autoplot(resid_gdp_ts, series="Detrended GDP", colour = "#00BFC4") +
theme_bw() +
xlab("Time") +
ylab("Residuals") +
ggtitle("Detrended GDP")
# Differencing plot
plot2_gdp <- autoplot(diff(gdp_ts), series = "First Difference GDP", colour = "#F8766D") +
theme_bw() +
xlab("Time") +
ylab("Differences") +
ggtitle("First Difference GDP")
# Arrange plots
grid.arrange(plot1_gdp, plot2_gdp, nrow = 2)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Detrending using the original data frame
fit_cpi <- lm(CPIAUCSL ~ DATE, data = cpi_data, na.action = NULL)
# Convert residuals to a ts object for plotting
resid_cpi_ts <- ts(resid(fit_cpi), start=c(start_year_cpi, start_quarter_cpi), frequency=4)
# Plot the residuals
plot1_cpi <- autoplot(resid_cpi_ts, series="Detrended CPI", colour = "#00BFC4") +
theme_bw() +
xlab("Time") +
ylab("Residuals") +
ggtitle("Detrended CPI")
# Differencing plot
plot2_cpi <- autoplot(diff(cpi_ts), series = "First Difference CPI", colour = "#F8766D") +
theme_bw() +
xlab("Time") +
ylab("Differences") +
ggtitle("First Difference CPI")
# Arrange plots
grid.arrange(plot1_cpi, plot2_cpi, nrow = 2)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Prepare the data frame with the correct start date
crude_oil_df <- data.frame(
Date = seq(as.Date("1973-10-01"), by = "month", length.out = length(composite_crude_oil_ts)),
Value = as.vector(composite_crude_oil_ts)
)
# Calculate moving averages with the specified window sizes
crude_oil_df$ma5 <- zoo::rollmean(crude_oil_df$Value, 5, mean, fill = NA, align = "right")
crude_oil_df$ma15 <- zoo::rollmean(crude_oil_df$Value, 15, mean, fill = NA, align = "right")
crude_oil_df$ma20 <- zoo::rollmean(crude_oil_df$Value, 20, mean, fill = NA, align = "right")
crude_oil_df$ma30 <- zoo::rollmean(crude_oil_df$Value, 30, mean, fill = NA, align = "right")
# Create the ggplot object with a color aesthetic for the legend
p <- ggplot(crude_oil_df, aes(x = Date)) +
geom_line(aes(y = Value, color = "Actual Data")) +
geom_line(aes(y = ma5, color = "5-MA")) +
geom_line(aes(y = ma15, color = "15-MA")) +
geom_line(aes(y = ma20, color = "20-MA")) +
geom_line(aes(y = ma30, color = "30-MA")) +
xlab("Time") + ylab("Value (USD)") +
ggtitle('Crude Oil Price with Moving Averages') +
theme_bw()
# Convert the ggplot object to a plotly object
plotly::ggplotly(p)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
natural_gas_df <- data.frame(
Date = seq(as.Date("1973-10-01"), by = "month", length.out = length(citygate_gas_ts)),
Value = as.vector(citygate_gas_ts)
)
# Calculate moving averages with the specified window sizes
natural_gas_df$ma5 <- zoo::rollmean(natural_gas_df$Value, 5, mean, fill = NA, align = "right")
natural_gas_df$ma15 <- zoo::rollmean(natural_gas_df$Value, 15, mean, fill = NA, align = "right")
natural_gas_df$ma20 <- zoo::rollmean(natural_gas_df$Value, 20, mean, fill = NA, align = "right")
natural_gas_df$ma30 <- zoo::rollmean(natural_gas_df$Value, 30, mean, fill = NA, align = "right")
# Create the ggplot object with a color aesthetic for the legend
p_ng <- ggplot(natural_gas_df, aes(x = Date)) +
geom_line(aes(y = Value, color = "Actual Data")) +
geom_line(aes(y = ma5, color = "5-MA")) +
geom_line(aes(y = ma15, color = "15-MA")) +
geom_line(aes(y = ma20, color = "20-MA")) +
geom_line(aes(y = ma30, color = "30-MA")) +
xlab("Time") + ylab("Value (Price)") +
ggtitle('Natural Gas Price with Moving Averages') +
theme_bw()
# Convert the ggplot object to a plotly object
plotly::ggplotly(p_ng)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Calculate moving averages with the specified window sizes
total_electricity_prices$ma5 <- zoo::rollmean(total_electricity_prices$Value, 5, mean, fill = NA, align = "right")
total_electricity_prices$ma15 <- zoo::rollmean(total_electricity_prices$Value, 15, mean, fill = NA, align = "right")
total_electricity_prices$ma20 <- zoo::rollmean(total_electricity_prices$Value, 20, mean, fill = NA, align = "right")
total_electricity_prices$ma30 <- zoo::rollmean(total_electricity_prices$Value, 30, mean, fill = NA, align = "right")
# Create the ggplot object with a color aesthetic for the legend
p_electricity <- ggplot(total_electricity_prices, aes(x = Date)) +
geom_line(aes(y = Value, color = "Actual Data")) +
geom_line(aes(y = ma5, color = "5-MA")) +
geom_line(aes(y = ma15, color = "15-MA")) +
geom_line(aes(y = ma20, color = "20-MA")) +
geom_line(aes(y = ma30, color = "30-MA")) +
xlab("Time") + ylab("Price (Cents per Kilowatthour)") +
ggtitle('Electricity Price with Moving Averages') +
theme_bw()
# Convert the ggplot object to a plotly object
plotly::ggplotly(p_electricity)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Calculate moving averages with the specified window sizes
gdp_data$ma5 <- zoo::rollmean(gdp_data$GDP, 5, mean, fill = NA, align = "right", by = 4)  # Considering quarterly data
gdp_data$ma15 <- zoo::rollmean(gdp_data$GDP, 15, mean, fill = NA, align = "right", by = 4)
gdp_data$ma20 <- zoo::rollmean(gdp_data$GDP, 20, mean, fill = NA, align = "right", by = 4)
gdp_data$ma30 <- zoo::rollmean(gdp_data$GDP, 30, mean, fill = NA, align = "right", by = 4)
# Create the ggplot object with a color aesthetic for the legend
p_gdp <- ggplot(gdp_data, aes(x = DATE)) +
geom_line(aes(y = GDP, color = "Actual Data")) +
geom_line(aes(y = ma5, color = "5-MA")) +
geom_line(aes(y = ma15, color = "15-MA")) +
geom_line(aes(y = ma20, color = "20-MA")) +
geom_line(aes(y = ma30, color = "30-MA")) +
xlab("Time") + ylab("GDP (in billions)") +
ggtitle('GDP with Moving Averages') +
theme_bw()
# Convert the ggplot object to a plotly object
plotly::ggplotly(p_gdp)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
#|
# Calculate moving averages with the specified window sizes
# Replace 'fill = NA' with 'fill = ifelse(is.na(.), NA, mean(., na.rm = TRUE))' if you want to avoid NA in your moving averages
cpi_data$ma5 <- zoo::rollmean(cpi_data$CPIAUCSL, 5, fill = NA, align = "right", by.column = FALSE)
cpi_data$ma15 <- zoo::rollmean(cpi_data$CPIAUCSL, 15, fill = NA, align = "right", by.column = FALSE)
cpi_data$ma20 <- zoo::rollmean(cpi_data$CPIAUCSL, 20, fill = NA, align = "right", by.column = FALSE)
cpi_data$ma30 <- zoo::rollmean(cpi_data$CPIAUCSL, 30, fill = NA, align = "right", by.column = FALSE)
# Create the ggplot object with a color aesthetic for the legend
p_cpi <- ggplot(cpi_data, aes(x = DATE)) +
geom_line(aes(y = CPIAUCSL, color = "Actual Data")) +
geom_line(aes(y = ma5, color = "5-MA")) +
geom_line(aes(y = ma15, color = "15-MA")) +
geom_line(aes(y = ma20, color = "20-MA")) +
geom_line(aes(y = ma30, color = "30-MA")) +
xlab("Time") + ylab("CPIAUCSL") +
ggtitle('CPI with Moving Averages') +
theme_bw()
# Convert the ggplot object to a plotly object
plotly::ggplotly(p_cpi)
