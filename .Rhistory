geom_line(aes(y = GDP, color = "Actual Data")) +
geom_line(aes(y = ma5, color = "5-MA")) +
geom_line(aes(y = ma15, color = "15-MA")) +
geom_line(aes(y = ma20, color = "20-MA")) +
geom_line(aes(y = ma30, color = "30-MA")) +
xlab("Time") + ylab("GDP (in billions)") +
ggtitle('GDP with Moving Averages') +
theme_bw()
# Convert the ggplot object to a plotly object
plotly::ggplotly(p_gdp)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
#|
# Calculate moving averages with the specified window sizes
# Replace 'fill = NA' with 'fill = ifelse(is.na(.), NA, mean(., na.rm = TRUE))' if you want to avoid NA in your moving averages
cpi_data$ma5 <- zoo::rollmean(cpi_data$CPIAUCSL, 5, fill = NA, align = "right", by.column = FALSE)
cpi_data$ma15 <- zoo::rollmean(cpi_data$CPIAUCSL, 15, fill = NA, align = "right", by.column = FALSE)
cpi_data$ma20 <- zoo::rollmean(cpi_data$CPIAUCSL, 20, fill = NA, align = "right", by.column = FALSE)
cpi_data$ma30 <- zoo::rollmean(cpi_data$CPIAUCSL, 30, fill = NA, align = "right", by.column = FALSE)
# Create the ggplot object with a color aesthetic for the legend
p_cpi <- ggplot(cpi_data, aes(x = DATE)) +
geom_line(aes(y = CPIAUCSL, color = "Actual Data")) +
geom_line(aes(y = ma5, color = "5-MA")) +
geom_line(aes(y = ma15, color = "15-MA")) +
geom_line(aes(y = ma20, color = "20-MA")) +
geom_line(aes(y = ma30, color = "30-MA")) +
xlab("Time") + ylab("CPIAUCSL") +
ggtitle('CPI with Moving Averages') +
theme_bw()
# Convert the ggplot object to a plotly object
plotly::ggplotly(p_cpi)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# First Differencing
first_diff_crude_oil <- diff(composite_crude_oil_ts)
ggtsdisplay(first_diff_crude_oil, main = "First Differencing of Crude Oil Prices")
# Second Differencing
second_diff_crude_oil <- diff(first_diff_crude_oil)
ggtsdisplay(second_diff_crude_oil, main = "Second Differencing of Crude Oil Prices")
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# First Differencing
first_diff_natural_gas <- diff(citygate_gas_ts)
ggtsdisplay(first_diff_natural_gas, main = "First Differencing of Natural Gas Prices")
# Second Differencing
second_diff_natural_gas <- diff(first_diff_natural_gas)
ggtsdisplay(second_diff_natural_gas, main = "Second Differencing of Natural Gas Prices")
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# First Differencing
first_diff_electricity <- diff(total_electricity_ts)
ggtsdisplay(first_diff_electricity, main = "First Differencing of Electricity Prices")
# Second Differencing
second_diff_electricity <- diff(first_diff_electricity)
ggtsdisplay(second_diff_electricity, main = "Second Differencing of Electricity Prices")
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# First Differencing
first_diff_gdp <- diff(gdp_ts)
ggtsdisplay(first_diff_gdp, main = "First Differencing of GDP")
# Second Differencing
second_diff_gdp <- diff(first_diff_gdp)
ggtsdisplay(second_diff_gdp, main = "Second Differencing of GDP")
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# First Differencing
first_diff_cpi <- diff(cpi_ts)
ggtsdisplay(first_diff_cpi, main = "First Differencing of CPI")
# Second Differencing
second_diff_cpi <- diff(first_diff_cpi)
ggtsdisplay(second_diff_cpi, main = "Second Differencing of CPI")
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
d = 1
i = 1
temp = data.frame()
ls = matrix(rep(NA, 6 * 35), nrow = 35)
for (p in 0:1) {
for (q in 1:9) {
for (d in 0:1) {
if (p + d + q <= 8) {  # Usual threshold
model <- Arima(diff(composite_crude_oil_ts, differences = d), order = c(p, d, q), include.drift = TRUE)
ls[i,] = c(p, d, q, model$aic, model$bic, model$aicc)
i = i + 1
}
}
}
}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
i = 1
temp = data.frame()
ls = matrix(rep(NA, 6 * 35), nrow = 35)
for (p in 0:1) {
for (q in 1:9) {
for (d in 0:1) {
if (p + d + q <= 8) {  # Usual threshold
# Ensure the correct value is passed to `differences` in `diff()`
model <- Arima(composite_crude_oil_ts, order = c(p, d, q), include.drift = TRUE)
ls[i,] = c(p, d, q, model$aic, model$bic, model$aicc)
i = i + 1
}
}
}
}
temp = as.data.frame(ls)
names(temp) = c("p", "d", "q", "AIC", "BIC", "AICc")
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
i = 1
temp = data.frame()
ls = matrix(rep(NA, 6 * 35), nrow = 35)
for (p in 0:1) {
for (q in 1:9) {
for (d in 0:1) {
if (p + d + q <= 8) {  # Usual threshold
# Ensure the correct value is passed to `differences` in `diff()`
model <- Arima(composite_crude_oil_ts, order = c(p, d, q), include.drift = TRUE)
ls[i,] = c(p, d, q, model$aic, model$bic, model$aicc)
i = i + 1
}
}
}
}
temp = as.data.frame(ls)
names(temp) = c("p", "d", "q", "AIC", "BIC", "AICc")
# Display the table
knitr::kable(temp)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Initialize the matrix to store model results
results_list = list()
for (p in 0:1) {
for (q in 1:9) {
for (d in 0:1) {
if (p + d + q <= 8) {  # Usual threshold
model <- try(Arima(composite_crude_oil_ts, order = c(p, d, q), include.drift = TRUE), silent = TRUE)
if (class(model) != "try-error") {
results_list[[length(results_list) + 1]] <- c(p, d, q, model$aic, model$bic, model$aicc)
}
}
}
}
}
# Find and display the models with the minimum AIC, BIC, and AICc
best_aic_model <- temp[which.min(temp$AIC),]
best_bic_model <- temp[which.min(temp$BIC),]
best_aicc_model <- temp[which.min(temp$AICc),]
cat("Model with minimum AIC:\n")
print(knitr::kable(best_aic_model))
cat("\nModel with minimum BIC:\n")
print(knitr::kable(best_bic_model))
cat("\nModel with minimum AICc:\n")
print(knitr::kable(best_aicc_model))
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Initialize the list to store model results
results_list = list()
for (p in 0:1) {
for (q in 1:9) {
for (d in 0:1) {
if (p + d + q <= 8) {  # Usual threshold
model <- try(Arima(composite_crude_oil_ts, order = c(p, d, q), include.drift = TRUE), silent = TRUE)
if (!inherits(model, "try-error")) {
results_list[[length(results_list) + 1]] <- c(p, d, q, model$aic, model$bic, model$aicc)
}
}
}
}
}
# Convert the list to a data frame
temp = do.call(rbind, results_list)
names(temp) = c("p", "d", "q", "AIC", "BIC", "AICc")
# Convert character vectors to numeric
temp <- as.data.frame(lapply(temp, as.numeric), stringsAsFactors = FALSE)
# Display the table
knitr::kable(temp)
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
d=1
i=1
temp= data.frame()
ls=matrix(rep(NA,5*25),nrow=25)
for (p in 0:1)
{
for(q in 1:9)
{
for(d in 0:1)
{
if(p-1+d+q-1<=8) #usual threshold
{
model<- Arima(diff(techmu_ts),order=c(p,d,q),include.drift=TRUE)
ls[i,]= c(p,d,q,model$aic,model$bic,model$aicc)
i=i+1
#print(i)
}
}
}
}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
d=1
i=1
temp= data.frame()
ls=matrix(rep(NA,5*25),nrow=25)
for (p in 0:1)
{
for(q in 1:9)
{
for(d in 0:1)
{
if(p-1+d+q-1<=8) #usual threshold
{
model<- Arima(diff(composite_crude_oil_ts),order=c(p,d,q),include.drift=TRUE)
ls[i,]= c(p,d,q,model$aic,model$bic,model$aicc)
i=i+1
#print(i)
}
}
}
}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
d=1
i=1
temp= data.frame()
ls=matrix(rep(NA,5*25),nrow=25)
for (p in 0:1)
{
for(q in 0:2)
{
for(d in 0:1)
{
if(p-1+d+q-1<=8) #usual threshold
{
model<- Arima(diff(composite_crude_oil_ts),order=c(p,d,q),include.drift=TRUE)
ls[i,]= c(p,d,q,model$aic,model$bic,model$aicc)
i=i+1
#print(i)
}
}
}
}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
d=1
i=1
temp= data.frame()
ls=matrix(rep(NA,6*25),nrow=25)
for (p in 1:5)
{
for(q in 1:5)
{
if(p-1+d+q-1<=8)
{
model<- Arima(composite_crude_oil_ts,order=c(p-1,d,q-1),include.drift=TRUE)
ls[i,]= c(p-1,d,q-1,model$aic,model$bic,model$aicc)
i=i+1
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
temp[which.min(temp$AIC),]
# Find and display the models with the minimum AIC, BIC, and AICc
best_aic_model <- temp[which.min(temp$AIC),]
best_bic_model <- temp[which.min(temp$BIC),]
best_aicc_model <- temp[which.min(temp$AICc),]
cat("Model with minimum AIC:\n")
print(knitr::kable(best_aic_model))
cat("\nModel with minimum BIC:\n")
print(knitr::kable(best_bic_model))
cat("\nModel with minimum AICc:\n")
print(knitr::kable(best_aicc_model))
# Find and display the models with the minimum AIC, BIC, and AICc
temp[which.min(temp$AIC),]
temp[which.min(temp$BIC),]
temp[which.min(temp$AICc),]
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
d=1
i=1
temp= data.frame()
ls=matrix(rep(NA,6*25),nrow=25)
for (p in 1:5)
{
for(q in 1:5)
{
if(p-1+d+q-1<=8)
{
model<- Arima(composite_crude_oil_ts,order=c(p-1,d,q-1),include.drift=TRUE)
ls[i,]= c(p-1,d,q-1,model$aic,model$bic,model$aicc)
i=i+1
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
temp[which.min(temp$AIC),]
# Find and display the models with the minimum AIC, BIC, and AICc
temp[which.min(temp$AIC),]
temp[which.min(temp$BIC),]
temp[which.min(temp$AICc),]
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
d=1
i=1
temp= data.frame()
ls=matrix(rep(NA,6*25),nrow=25)
for (p in 1:5)
{
for(q in 1:5)
{
if(p-1+d+q-1<=8)
{
model<- Arima(citygate_gas_ts,order=c(p-1,d,q-1),include.drift=TRUE)
ls[i,]= c(p-1,d,q-1,model$aic,model$bic,model$aicc)
i=i+1
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
temp[which.min(temp$AIC),]
# Find and display the models with the minimum AIC, BIC, and AICc
temp[which.min(temp$AIC),]
temp[which.min(temp$BIC),]
temp[which.min(temp$AICc),]
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
d=1
i=1
temp= data.frame()
ls=matrix(rep(NA,6*25),nrow=25)
for (p in 1:5)
{
for(q in 1:5)
{
if(p-1+d+q-1<=8)
{
model<- Arima(resid_electricity_ts,order=c(p-1,d,q-1),include.drift=TRUE)
ls[i,]= c(p-1,d,q-1,model$aic,model$bic,model$aicc)
i=i+1
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
temp[which.min(temp$AIC),]
# Find and display the models with the minimum AIC, BIC, and AICc
temp[which.min(temp$AIC),]
temp[which.min(temp$BIC),]
temp[which.min(temp$AICc),]
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
d=1
i=1
temp= data.frame()
ls=matrix(rep(NA,6*25),nrow=25)
for (p in 1:5)
{
for(q in 1:5)
{
if(p-1+d+q-1<=8)
{
model<- Arima(gdp_ts,order=c(p-1,d,q-1),include.drift=TRUE)
ls[i,]= c(p-1,d,q-1,model$aic,model$bic,model$aicc)
i=i+1
}
}
}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
d=1
i=1
temp= data.frame()
ls=matrix(rep(NA,6*4),nrow=25)
for (p in 1:2)
{
for(q in 1:2)
{
if(p-1+d+q-1<=8)
{
model<- Arima(gdp_ts,order=c(p-1,d,q-1),include.drift=TRUE)
ls[i,]= c(p-1,d,q-1,model$aic,model$bic,model$aicc)
i=i+1
}
}
}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
d=1
i=1
temp= data.frame()
ls=matrix(rep(NA,6*4),nrow=4)
for (p in 1:2)
{
for(q in 1:2)
{
if(p-1+d+q-1<=8)
{
model<- Arima(gdp_ts,order=c(p-1,d,q-1),include.drift=TRUE)
ls[i,]= c(p-1,d,q-1,model$aic,model$bic,model$aicc)
i=i+1
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
temp[which.min(temp$AIC),]
# Find and display the models with the minimum AIC, BIC, and AICc
temp[which.min(temp$AIC),]
temp[which.min(temp$BIC),]
temp[which.min(temp$AICc),]
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
#|
d=1
i=1
temp= data.frame()
ls=matrix(rep(NA,6*4),nrow=4)
for (p in 1:2)
{
for(q in 1:2)
{
if(p-1+d+q-1<=8)
{
model<- Arima(gdp_ts,order=c(p-1,d,q-1),include.drift=TRUE)
ls[i,]= c(p-1,d,q-1,model$aic,model$bic,model$aicc)
i=i+1
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
temp[which.min(temp$AIC),]
# Find and display the models with the minimum AIC, BIC, and AICc
temp[which.min(temp$AIC),]
temp[which.min(temp$BIC),]
temp[which.min(temp$AICc),]
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
#|
d=1
i=1
temp= data.frame()
ls=matrix(rep(NA,6*5),nrow=5)
for (p in 1:2)
{
for(q in 1:2)
{
if(p-1+d+q-1<=8)
{
model<- Arima(gdp_ts,order=c(p-1,d,q-1),include.drift=TRUE)
ls[i,]= c(p-1,d,q-1,model$aic,model$bic,model$aicc)
i=i+1
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
temp[which.min(temp$AIC),]
# Find and display the models with the minimum AIC, BIC, and AICc
temp[which.min(temp$AIC),]
temp[which.min(temp$BIC),]
temp[which.min(temp$AICc),]
