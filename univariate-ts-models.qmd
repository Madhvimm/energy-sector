---
title: "Univariate TS Models (ARIMA/SARIMA)"
output: distill::distill_article

---



```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false
library(ggplot2)
library(readr)
library(tidyverse)
library(lubridate)
library(forecast)
library(tseries)
library(plotly)
library(gridExtra)

```



## Time Series Plot

In this section, we delve into time series data, focusing on the energy sector's economic impact. Time series analysis is pivotal in understanding the temporal patterns and trends within data points collected sequentially over time. By employing time series plots, we gain invaluable insights into the underlying structures of our datasets, such as trends, seasonality, and cyclical fluctuations.

The visualizations will present a detailed examination of several key data sets: Crude Oil Prices, Natural Gas Prices, Electricity Prices, GDP, and CPI. Each plot is designed to elucidate the temporal progression of these variables, providing a foundation for deeper analytical exploration. Through these visualizations, we aim to identify significant patterns, anomalies, and correlations within the data, enabling us to draw meaningful conclusions about the economic interplay between energy prices and broader economic indicators.


::: panel-tabset

## Crude Oil


```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false

# Load the Crude Oil Price dataset
crude_oil_prices <- read.csv("MER_T09_01_CRUDE_OIL_PRICE.csv")

# Convert YYYYMM to Date format
crude_oil_prices <- crude_oil_prices[substr(crude_oil_prices$YYYYMM, 5, 6) <= 12, ]
# After filtering, attempt to convert 'YYYYMM' to Date format again
crude_oil_prices$Date <- as.Date(paste0(substr(crude_oil_prices$YYYYMM, 1, 4), 
                                         substr(crude_oil_prices$YYYYMM, 5, 6), 
                                         "01"), format="%Y%m%d")


head(crude_oil_prices$Date)


sum(is.na(crude_oil_prices$Value))



crude_oil_prices$Value[crude_oil_prices$Value == "Not Available"] <- NA

# Convert the 'Value' column to numeric, since it might be a character because of the "Not Available" strings
crude_oil_prices$Value <- as.numeric(crude_oil_prices$Value)

# Check for NA values again
sum(is.na(crude_oil_prices$Value))

#Remove rows with NA values
crude_oil_prices <- na.omit(crude_oil_prices)

description_counts <- table(crude_oil_prices$Description)
description_counts

```

```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false

composite_crude_oil_prices <- subset(crude_oil_prices, Description == "Refiner Acquisition Cost of Crude Oil, Composite")
```


```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true
# Plotting with ggplot2
p_composite_crude_oil <- ggplot(composite_crude_oil_prices, aes(x = Date, y = Value)) +
  geom_line() + # Add a line geometry
  theme_minimal() + # Use a minimal theme for a cleaner look
  labs(title = "Refiner Acquisition Cost of Crude Oil, Composite Over Time",
       x = "Date",
       y = "Value (USD)")

# Convert ggplot object to plotly for interactivity
ggplotly(p_composite_crude_oil)

```


The time series plot for crude oil showcases the historical refiner acquisition costs. Observations include a long-term upward trend, significant volatility, and notable peaks, particularly around 2008 and 2011-2014. The recent years exhibit a declining trend post the last peak, highlighting the dynamic nature of crude oil prices.

Analysis:

Trend: Increasing over the long term with recent decline.
Seasonality: No clear seasonality observed due to the dominant influence of geopolitical and economic factors on oil prices.
Nature of Series: The series seems to be multiplicative, given the percentage changes and volatility patterns.




## Natural Gas

```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false


# Set the working directory
setwd("/Users/madhvimalhotra/Downloads/Spring 2024/Energy Time Series Poject/energy-sector")

# Construct the file path
file_path <- file.path(getwd(), "MER_T09_10_NATURAL GAS PRICES.csv")

# Load the Natural Gas Prices dataset
natural_gas_prices <- read.csv(file_path)


# Filter out invalid months (assuming the same structure as the crude oil prices dataset)
natural_gas_prices <- natural_gas_prices[substr(natural_gas_prices$YYYYMM, 5, 6) <= 12, ]

# Convert YYYYMM to Date format
natural_gas_prices$Date <- as.Date(paste0(substr(natural_gas_prices$YYYYMM, 1, 4), 
                                          substr(natural_gas_prices$YYYYMM, 5, 6), 
                                          "01"), format="%Y%m%d")

# Replace "Not Available" with NA
natural_gas_prices$Value[natural_gas_prices$Value == "Not Available"] <- NA

# Convert the 'Value' column to numeric
natural_gas_prices$Value <- as.numeric(natural_gas_prices$Value)

# Handle NA values by removing rows with NA
natural_gas_prices <- na.omit(natural_gas_prices)

description_counts <- table(natural_gas_prices$Description)
description_counts

```


```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false

# Filter for 'Natural Gas Price, Citygate'
citygate_gas_prices <- subset(natural_gas_prices, Description == "Natural Gas Price, Citygate")

```



```{r}
#| code-fold: true
#| code-summary: 'Plot Natural Gas Prices'
#| warning: false
#| output: true

# Plotting with ggplot2
p_citygate_gas <- ggplot(citygate_gas_prices, aes(x = Date, y = Value)) +
  geom_line() + # Add a line geometry
  theme_minimal() + # Use a minimal theme for a cleaner look
  labs(title = "Natural Gas Price, Citygate Over Time",
       x = "Date",
       y = "Price (USD)")

# Convert ggplot object to plotly for interactivity
ggplotly(p_citygate_gas)
```









## Electricity


```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false

# Load the Average Prices Electricity dataset
avg_prices_electricity <- read.csv("MER_T09_08_AVG_PRICES_ELECTRICITY.csv")

# Convert YYYYMM to Date format for the first three datasets
avg_prices_electricity$Date <- as.Date(paste0(substr(avg_prices_electricity$YYYYMM, 1, 4),
                                               substr(avg_prices_electricity$YYYYMM, 5, 6),
                                               "01"), format="%Y%m%d")

# Filter out invalid months if necessary (adjust if the structure is different from the natural gas dataset)
avg_prices_electricity <- avg_prices_electricity[substr(avg_prices_electricity$YYYYMM, 5, 6) <= 12, ]

# Replace "Not Available" with NA
avg_prices_electricity$Value[avg_prices_electricity$Value == "Not Available"] <- NA

# Convert the 'Value' column to numeric
avg_prices_electricity$Value <- as.numeric(avg_prices_electricity$Value)

# Handle NA values by removing rows with NA
avg_prices_electricity <- na.omit(avg_prices_electricity)

# Get the description counts
description_counts_electricity <- table(avg_prices_electricity$Description)
print(description_counts_electricity)


colnames(avg_prices_electricity)
```



```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false

total_electricity_prices <- subset(avg_prices_electricity, Description == "Average Price of Electricity to Ultimate Customers, Total")




```


```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# Plotting with ggplot2
p_total_electricity <- ggplot(total_electricity_prices, aes(x = Date, y = Value)) +
  geom_line() + # Add a line geometry
  theme_minimal() + # Use a minimal theme for a cleaner look
  labs(title = "Average Price of Electricity to Ultimate Customers, Total Over Time",
       x = "Date",
       y = "Price (Cents per Kilowatthour)")

# Convert ggplot object to plotly for interactivity
ggplotly(p_total_electricity)


```



## GDP


```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false


# Load the GDP dataset
gdp_data <- read.csv("GDP.csv")


colnames(gdp_data)


# Convert DATE column to Date format if necessary
gdp_data$DATE <- as.Date(gdp_data$DATE)

# Handle NA values by removing rows with NA if you haven't done it already
gdp_data <- na.omit(gdp_data)
```


```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# Plotting with ggplot2
p_gdp <- ggplot(gdp_data, aes(x = DATE, y = GDP)) +
  geom_line() +
  theme_minimal() +
  labs(title = "Gross Domestic Product Over Time",
       x = "Date",
       y = "GDP (Billion USD)")

# Convert ggplot object to plotly for interactivity
ggplotly(p_gdp)

```





## CPI


```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false


# Load the CPI dataset
cpi_data <- read.csv("CPIAUCSL.csv")

colnames(cpi_data)

# Convert DATE column to Date format if necessary
cpi_data$DATE <- as.Date(cpi_data$DATE)

# Handle NA values by removing rows with NA if you haven't done it already
cpi_data <- na.omit(cpi_data)

```



```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# Plotting with ggplot2
p_cpi <- ggplot(cpi_data, aes(x = DATE, y = CPIAUCSL)) +
  geom_line() +
  theme_minimal() +
  labs(title = "Consumer Price Index Over Time",
       x = "Date",
       y = "CPI")

# Convert ggplot object to plotly for interactivity
ggplotly(p_cpi)

```



:::



## Lag Plots


Lag plot is a visual representation of the nitrate levels for each month, to identify any patterns or relationships in the data over time. Each panel represents a different lag, meaning the number of months between the points in the series. The plot shows data from a public water system (PWS) with the ID CA1910067.



::: panel-tabset


```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: false


# For Crude Oil
start_year <- as.numeric(format(min(composite_crude_oil_prices$Date), "%Y"))
start_month <- as.numeric(format(min(composite_crude_oil_prices$Date), "%m"))
composite_crude_oil_ts <- ts(composite_crude_oil_prices$Value, start=c(start_year, start_month), frequency=12)

# For Natural Gas
start_year_gas <- as.numeric(format(min(citygate_gas_prices$Date), "%Y"))
start_month_gas <- as.numeric(format(min(citygate_gas_prices$Date), "%m"))
citygate_gas_ts <- ts(citygate_gas_prices$Value, start=c(start_year_gas, start_month_gas), frequency=12)

# For Electricity
start_year_elec <- as.numeric(format(min(total_electricity_prices$Date), "%Y"))
start_month_elec <- as.numeric(format(min(total_electricity_prices$Date), "%m"))
total_electricity_ts <- ts(total_electricity_prices$Value, start=c(start_year_elec, start_month_elec), frequency=12)

# For GDP (assuming it's quarterly, replace with actual data if different)
start_year_gdp <- as.numeric(format(min(gdp_data$DATE), "%Y"))
start_quarter_gdp <- quarter(min(gdp_data$DATE))
gdp_ts <- ts(gdp_data$GDP, start=c(start_year_gdp, start_quarter_gdp), frequency=4)

# For CPI (assuming it's quarterly, replace with actual data if different)
start_year_cpi <- as.numeric(format(min(cpi_data$DATE), "%Y"))
start_quarter_cpi <- quarter(min(cpi_data$DATE))
cpi_ts <- ts(cpi_data$CPIAUCSL, start=c(start_year_cpi, start_quarter_cpi), frequency=4)

```


## Crude Oil


```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# Create lag plot
library(forecast)
gglagplot(composite_crude_oil_ts, do.lines=FALSE) + 
  xlab("Lags") + 
  ylab("Value (USD)") + 
  ggtitle("Lag Plot for Refiner Acquisition Cost of Crude Oil, Composite") + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + 
  theme_bw()
```


## Natural Gas

```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# Create lag plot
gglagplot(citygate_gas_ts, do.lines=FALSE) + 
  xlab("Lags") + 
  ylab("Price (USD)") + 
  ggtitle("Lag Plot for Natural Gas Price, Citygate") + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + 
  theme_bw()
```


## Electricity

```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# Create lag plot
gglagplot(total_electricity_ts, do.lines=FALSE) + 
  xlab("Lags") + 
  ylab("Price (Cents per Kilowatthour)") + 
  ggtitle("Lag Plot for Average Price of Electricity to Ultimate Customers, Total") + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + 
  theme_bw()
```


## GDP


```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# Create lag plot
gglagplot(gdp_ts, do.lines=FALSE) + 
  xlab("Lags") + 
  ylab("GDP (Billion USD)") + 
  ggtitle("Lag Plot for GDP") + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + 
  theme_bw()
```



## CPI

```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# Create lag plot
gglagplot(cpi_ts, do.lines=FALSE) + 
  xlab("Lags") + 
  ylab("CPI") + 
  ggtitle("Lag Plot for CPI") + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + 
  theme_bw()
```


:::



We can observe clusters of similarly colored points at lag 1 do indicate some level of autocorrelation in the nitrate levels. This means that the nitrate level from the previous month has some degree of influence on the current month's level. For time series modeling, such as ARIMA (Autoregressive Integrated Moving Average), this suggests that an autoregressive term would indeed be significant, meaning that the model would use previous data points to predict future ones.

The fact that this autocorrelation weakens at higher lags, implies that older data points have less predictive power. This would be important when determining the order of the AR term in an ARIMA model; a smaller order may be sufficient, as incorporating too many past values might not improve the model. The presence of seasonality, suggested by the clustering of the same months' colors, might also imply that a seasonal component should be considered in the modeling process, which could lead to the use of a Seasonal ARIMA (SARIMA) model.


#### Decomposition Plot

::: panel-tabset



## Crude Oil


```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# Decompose the time series
decomposed_crude_oil <- decompose(composite_crude_oil_ts, "multiplicative")

# Plot the decomposed components
autoplot(decomposed_crude_oil, colour = "#5a3196") + 
  ggtitle("Decomposition Plot for Refiner Acquisition Cost of Crude Oil, Composite") +
  theme_bw()

```


## Natural Gas

```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# Decompose the time series
decomposed_natural_gas <- decompose(citygate_gas_ts, "multiplicative")

# Plot the decomposed components
autoplot(decomposed_natural_gas, colour = "#5a3196") + 
  ggtitle("Decomposition Plot for Natural Gas Price, Citygate") +
  theme_bw()

```


## Electricity

```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# Decompose the time series
decomposed_electricity <- decompose(total_electricity_ts, "multiplicative")

# Plot the decomposed components
autoplot(decomposed_electricity, colour = "#5a3196") + 
  ggtitle("Decomposition Plot for Average Price of Electricity to Ultimate Customers, Total") +
  theme_bw()

```


## GDP


```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# Decompose the time series
decomposed_gdp <- decompose(gdp_ts, "multiplicative")

# Plot the decomposed components
autoplot(decomposed_gdp, colour = "#5a3196") + 
  ggtitle("Decomposition Plot for GDP") +
  theme_bw()

```



## CPI

```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# Decompose the time series
decomposed_cpi <- decompose(cpi_ts, "multiplicative")

# Plot the decomposed components
autoplot(decomposed_cpi, colour = "#5a3196") + 
  ggtitle("Decomposition Plot for CPI") +
  theme_bw()

```

:::



Seasonal: The seasonal component reveals a clear, consistent pattern that repeats annually. This suggests that there are predictable fluctuations in nitrate levels that correspond to the time of year, which could be associated with agricultural cycles, weather patterns, or other seasonal factors.

There seems to be some volatility, suggesting that there might be other factors or perhaps outliers influencing nitrate levels that are not captured by the seasonal or trend components.




#### ACF & PACF Plots

::: panel-tabset



## Crude Oil


```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# ACF and PACF for Crude Oil
crude_oil_acf <- ggAcf(composite_crude_oil_ts) + 
  ggtitle("ACF Plot for Refiner Acquisition Cost of Crude Oil, Composite") + 
  theme_bw() +
  geom_segment(lineend = "butt", color = "#5a3196") +
  geom_hline(yintercept = 0, color = "#5a3196") 

crude_oil_pacf <- ggPacf(composite_crude_oil_ts) + 
  ggtitle("PACF Plot for Refiner Acquisition Cost of Crude Oil, Composite") + 
  theme_bw() +
  geom_segment(lineend = "butt", color = "#5a3196") +
  geom_hline(yintercept = 0, color = "#5a3196") 

grid.arrange(crude_oil_acf, crude_oil_pacf, nrow = 2)


```


## Natural Gas

```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# ACF and PACF for Natural Gas
natural_gas_acf <- ggAcf(citygate_gas_ts) + 
  ggtitle("ACF Plot for Natural Gas Price, Citygate") + 
  theme_bw() +
  geom_segment(lineend = "butt", color = "#5a3196") +
  geom_hline(yintercept = 0, color = "#5a3196") 

natural_gas_pacf <- ggPacf(citygate_gas_ts) + 
  ggtitle("PACF Plot for Natural Gas Price, Citygate") + 
  theme_bw() +
  geom_segment(lineend = "butt", color = "#5a3196") +
  geom_hline(yintercept = 0, color = "#5a3196") 

grid.arrange(natural_gas_acf, natural_gas_pacf, nrow = 2)


```


## Electricity

```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# ACF and PACF for Electricity
electricity_acf <- ggAcf(total_electricity_ts) + 
  ggtitle("ACF Plot for Average Price of Electricity to Ultimate Customers, Total") + 
  theme_bw() +
  geom_segment(lineend = "butt", color = "#5a3196") +
  geom_hline(yintercept = 0, color = "#5a3196") 

electricity_pacf <- ggPacf(total_electricity_ts) + 
  ggtitle("PACF Plot for Average Price of Electricity to Ultimate Customers, Total") + 
  theme_bw() +
  geom_segment(lineend = "butt", color = "#5a3196") +
  geom_hline(yintercept = 0, color = "#5a3196") 

grid.arrange(electricity_acf, electricity_pacf, nrow = 2)


```


## GDP


```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# ACF and PACF for GDP
gdp_acf <- ggAcf(gdp_ts) + 
  ggtitle("ACF Plot for GDP") + 
  theme_bw() +
  geom_segment(lineend = "butt", color = "#5a3196") +
  geom_hline(yintercept = 0, color = "#5a3196") 

gdp_pacf <- ggPacf(gdp_ts) + 
  ggtitle("PACF Plot for GDP") + 
  theme_bw() +
  geom_segment(lineend = "butt", color = "#5a3196") +
  geom_hline(yintercept = 0, color = "#5a3196") 

grid.arrange(gdp_acf, gdp_pacf, nrow = 2)


```



## CPI

```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# ACF and PACF for CPI
cpi_acf <- ggAcf(cpi_ts) + 
  ggtitle("ACF Plot for CPI") + 
  theme_bw() +
  geom_segment(lineend = "butt", color = "#5a3196") +
  geom_hline(yintercept = 0, color = "#5a3196") 

cpi_pacf <- ggPacf(cpi_ts) + 
  ggtitle("PACF Plot for CPI") + 
  theme_bw() +
  geom_segment(lineend = "butt", color = "#5a3196") +
  geom_hline(yintercept = 0, color = "#5a3196") 

grid.arrange(cpi_acf, cpi_pacf, nrow = 2)



```

:::






#### Dickey-Fuller Test

::: panel-tabset



## Crude Oil


```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# Dickey-Fuller Test for Crude Oil
adf_test_crude_oil <- tseries::adf.test(composite_crude_oil_ts)

# Display the test results
adf_test_crude_oil


```


## Natural Gas

```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# Dickey-Fuller Test for Natural Gas
adf_test_natural_gas <- tseries::adf.test(citygate_gas_ts)

# Display the test results
adf_test_natural_gas


```


## Electricity

```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# Dickey-Fuller Test for Electricity
adf_test_electricity <- tseries::adf.test(total_electricity_ts)

# Display the test results
adf_test_electricity


```


## GDP


```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# Dickey-Fuller Test for GDP
adf_test_gdp <- tseries::adf.test(gdp_ts)

# Display the test results
adf_test_gdp

```



## CPI

```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# Dickey-Fuller Test for CPI
adf_test_cpi <- tseries::adf.test(cpi_ts)

# Display the test results
adf_test_cpi


```

:::





#### Detrend VS Difference

::: panel-tabset



## Crude Oil


```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# Convert residuals to a ts object
fit_crude_oil <- lm(Value ~ Date, data = composite_crude_oil_prices, na.action = NULL)

resid_crude_oil_ts <- ts(resid(fit_crude_oil), start=c(start_year, start_month), frequency=12)

# Now plot the residuals
plot1_crude_oil <- autoplot(resid_crude_oil_ts, series="Detrended Crude Oil", colour = "#00BFC4") + 
  theme_bw() +
  xlab("Time") +
  ylab("Residuals") +
  ggtitle("Detrended Crude Oil")

# Differencing plot remains the same
plot2_crude_oil <- autoplot(diff(composite_crude_oil_ts), series = "First Difference Crude Oil", colour = "#F8766D") + 
  theme_bw() +
  xlab("Time") +
  ylab("Differences") +
  ggtitle("First Difference Crude Oil")

# Arrange plots
grid.arrange(plot1_crude_oil, plot2_crude_oil, nrow = 2)



```


## Natural Gas

```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# Detrending using the original data frame
fit_natural_gas <- lm(Value ~ Date, data = citygate_gas_prices, na.action = NULL)

# Convert residuals to a ts object for plotting
resid_natural_gas_ts <- ts(resid(fit_natural_gas), start=c(start_year_gas, start_month_gas), frequency=12)

# Now plot the residuals
plot1_natural_gas <- autoplot(resid_natural_gas_ts, series="Detrended Natural Gas", colour = "#00BA38") + 
  theme_bw() +
  xlab("Time") +
  ylab("Residuals") +
  ggtitle("Detrended Natural Gas")

# Differencing plot remains the same
plot2_natural_gas <- autoplot(diff(citygate_gas_ts), series = "First Difference Natural Gas", colour = "#619CFF") + 
  theme_bw() +
  xlab("Time") +
  ylab("Differences") +
  ggtitle("First Difference Natural Gas")

# Arrange plots
grid.arrange(plot1_natural_gas, plot2_natural_gas, nrow = 2)


```


## Electricity

```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# Detrending using the original data frame
fit_electricity <- lm(Value ~ Date, data = total_electricity_prices, na.action = NULL)

# Convert residuals to a ts object for plotting
resid_electricity_ts <- ts(resid(fit_electricity), start=c(start_year_elec, start_month_elec), frequency=12)

# Plot the residuals
plot1_electricity <- autoplot(resid_electricity_ts, series="Detrended Electricity", colour = "#C77CFF") + 
  theme_bw() +
  xlab("Time") +
  ylab("Residuals") +
  ggtitle("Detrended Electricity")

# Differencing plot
plot2_electricity <- autoplot(diff(total_electricity_ts), series = "First Difference Electricity", colour = "#7CAE00") + 
  theme_bw() +
  xlab("Time") +
  ylab("Differences") +
  ggtitle("First Difference Electricity")

# Arrange plots
grid.arrange(plot1_electricity, plot2_electricity, nrow = 2)


```


## GDP


```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# Detrending using the original data frame
fit_gdp <- lm(GDP ~ DATE, data = gdp_data, na.action = NULL)

# Convert residuals to a ts object for plotting
resid_gdp_ts <- ts(resid(fit_gdp), start=c(start_year_gdp, start_quarter_gdp), frequency=4)

# Plot the residuals
plot1_gdp <- autoplot(resid_gdp_ts, series="Detrended GDP", colour = "#00BFC4") + 
  theme_bw() +
  xlab("Time") +
  ylab("Residuals") +
  ggtitle("Detrended GDP")

# Differencing plot
plot2_gdp <- autoplot(diff(gdp_ts), series = "First Difference GDP", colour = "#F8766D") + 
  theme_bw() +
  xlab("Time") +
  ylab("Differences") +
  ggtitle("First Difference GDP")

# Arrange plots
grid.arrange(plot1_gdp, plot2_gdp, nrow = 2)


```



## CPI

```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# Detrending using the original data frame
fit_cpi <- lm(CPIAUCSL ~ DATE, data = cpi_data, na.action = NULL)

# Convert residuals to a ts object for plotting
resid_cpi_ts <- ts(resid(fit_cpi), start=c(start_year_cpi, start_quarter_cpi), frequency=4)

# Plot the residuals
plot1_cpi <- autoplot(resid_cpi_ts, series="Detrended CPI", colour = "#00BA38") + 
  theme_bw() +
  xlab("Time") +
  ylab("Residuals") +
  ggtitle("Detrended CPI")

# Differencing plot
plot2_cpi <- autoplot(diff(cpi_ts), series = "First Difference CPI", colour = "#619CFF") + 
  theme_bw() +
  xlab("Time") +
  ylab("Differences") +
  ggtitle("First Difference CPI")

# Arrange plots
grid.arrange(plot1_cpi, plot2_cpi, nrow = 2)


```

:::




#### Moving Average Smoothing

::: panel-tabset



## Crude Oil


```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# Put time series into dataframe
df_crude_oil <- composite_crude_oil_prices

# Calculate moving averages
ma_crude_3 <- zoo::rollapply(df_crude_oil$Value, 3, mean, fill = NA, align = "right")
ma_crude_12 <- zoo::rollapply(df_crude_oil$Value, 12, mean, fill = NA, align = "right")
ma_crude_16 <- zoo::rollapply(df_crude_oil$Value, 16, mean, fill = NA, align = "right")
ma_crude_24 <- zoo::rollapply(df_crude_oil$Value, 24, mean, fill = NA, align = "right")

# Add moving averages to the dataframe
df_crude_oil$ma3 <- ma_crude_3
df_crude_oil$ma12 <- ma_crude_12
df_crude_oil$ma16 <- ma_crude_16
df_crude_oil$ma24 <- ma_crude_24


# Create plot using ggplot2
ggplot(df_crude_oil, aes(x = Date, y = Value, color = "Data")) +
  geom_line() +
  geom_line(aes(y = ma3, color = "3 SMA")) +
  geom_line(aes(y = ma12, color = "12 SMA")) +
  geom_line(aes(y = ma16, color = "16 SMA")) +
  geom_line(aes(y = ma24, color = "24 SMA")) +
  xlab("Time") +
  ylab("Value (USD)") +
  ggtitle("Crude Oil Moving Average Smoothing") +
  scale_color_manual(name = "Type", values = c("Data" = "gray", "3 SMA" = "blue", "12 SMA" = "orange", "16 SMA" = "green", "24 SMA" = "red")) +
  theme_bw()

```


## Natural Gas

```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# Decompose the time series
decomposed_natural_gas <- decompose(citygate_gas_ts, "multiplicative")

# Plot the decomposed components
autoplot(decomposed_natural_gas, colour = "#5a3196") + 
  ggtitle("Decomposition Plot for Natural Gas Price, Citygate") +
  theme_bw()

```


## Electricity

```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# Decompose the time series
decomposed_electricity <- decompose(total_electricity_ts, "multiplicative")

# Plot the decomposed components
autoplot(decomposed_electricity, colour = "#5a3196") + 
  ggtitle("Decomposition Plot for Average Price of Electricity to Ultimate Customers, Total") +
  theme_bw()

```


## GDP


```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# Decompose the time series
decomposed_gdp <- decompose(gdp_ts, "multiplicative")

# Plot the decomposed components
autoplot(decomposed_gdp, colour = "#5a3196") + 
  ggtitle("Decomposition Plot for GDP") +
  theme_bw()

```



## CPI

```{r, warning=FALSE, message=FALSE, echo=FALSE}
#| code-fold: true
#| code-summary: 'Importing Libraries'
#| warning: false
#| output: true

# Decompose the time series
decomposed_cpi <- decompose(cpi_ts, "multiplicative")

# Plot the decomposed components
autoplot(decomposed_cpi, colour = "#5a3196") + 
  ggtitle("Decomposition Plot for CPI") +
  theme_bw()

```

:::














